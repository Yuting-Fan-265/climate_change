---
title: "About"
date: "May, 2024"
format:
    html: 
      self-contained: true
      grid: 
        margin-width: 50px
        body-width: 1000px
        sidebar-width: 250px
      code-fold: true
      embed-resources: true
editor_options: 
  chunk_output_type: console
execute: 
  echo: fenced
reference-location: margin
citation-location: margin
---

```{python}
#| echo: false
#| warning: false
#| message: false

# Data Ingestion and Munging
# import libraries
import pandas as pd
import plotly.express as px

# load the data
his = pd.read_csv("../Data Set/NABR_historic.csv")

# select the historic data
his_a = his[['long', 'lat', 'year', 'TimePeriod', 'RCP', 'scenario', 'treecanopy',
       'Ann_Herb', 'Bare', 'Herb', 'Litter', 'Shrub',
       'DrySoilDays_Summer_whole', 'Evap_Summer',
       'ExtremeShortTermDryStress_Summer_whole', 'FrostDays_Winter',
       'NonDrySWA_Summer_whole', 'Tmin_Winter',
       'VWC_Winter_whole', 'VWC_Spring_whole', 'VWC_Summer_whole',
       'VWC_Fall_whole']]
his_a.drop_duplicates(inplace=True)
his_a.dropna(subset=['Evap_Summer'], inplace=True)

his_b = his[['long', 'lat', 'year', 'TimePeriod', 'RCP', 'scenario', 'treecanopy',
       'Ann_Herb', 'Bare', 'Herb', 'Litter', 'Shrub',
       'PPT_Winter', 'PPT_Summer', 
       'T_Winter', 'T_Summer',  'Tmax_Summer']]
his_b.drop_duplicates(inplace=True)
his_b.dropna(subset=['PPT_Winter'], inplace=True)

his = pd.merge(his_a, his_b, on=['long', 'lat', 'year', 'TimePeriod', 'RCP', 'scenario', 'treecanopy',
       'Ann_Herb', 'Bare', 'Herb', 'Litter', 'Shrub'], how='inner')


# load the data
nt = pd.read_csv("../Data Set/nearterm_data_2020-2024.csv")
nt = nt[nt['scenario']=='sc22']

# select the nearterm data
nt_a = nt[['long', 'lat', 'year', 'TimePeriod', 'RCP', 'scenario', 'treecanopy',
       'Ann_Herb', 'Bare', 'Herb', 'Litter', 'Shrub',
       'DrySoilDays_Summer_whole', 'Evap_Summer',
       'ExtremeShortTermDryStress_Summer_whole', 'FrostDays_Winter',
       'NonDrySWA_Summer_whole', 'Tmin_Winter',
       'VWC_Winter_whole', 'VWC_Spring_whole', 'VWC_Summer_whole',
       'VWC_Fall_whole']]
nt_a.drop_duplicates(inplace=True)
nt_a.dropna(subset=['Evap_Summer'], inplace=True)

nt_b = nt[['long', 'lat', 'year', 'TimePeriod', 'RCP', 'scenario', 'treecanopy',
       'Ann_Herb', 'Bare', 'Herb', 'Litter', 'Shrub',
       'PPT_Winter', 'PPT_Summer', 
       'T_Winter', 'T_Summer',  'Tmax_Summer']]
nt_b.drop_duplicates(inplace=True)
nt_b.dropna(subset=['PPT_Winter'], inplace=True)

nt = pd.merge(nt_a, nt_b, on=['long', 'lat', 'year', 'TimePeriod', 'RCP', 'scenario', 'treecanopy',
       'Ann_Herb', 'Bare', 'Herb', 'Litter', 'Shrub'], how='inner')

# combine data
data = pd.concat([his, nt], axis=0)
data.sort_values(by=['long','lat','year'], inplace=True)
data.reset_index(drop=True, inplace=True)

```

# Vegetation Resilience

::: {.callout-tip}
## Chart Navigation Tips
- **Color-Coded Index:** The spectrum of colors on the map indicates the magnitude of change in motor fuel tax collection, with brighter red colors denoting positive changes and brighter blue colors indicating negative changes. 
- **Size-Coded Index:** The spectrum 
- **Tooltip:** Hover over any state on the map to see the exact percentage change in motor fuel tax collection for that location.
:::

::: {.panel-tabset}

## Bare Ground
```{python}
#| label: fig-plot3
#| fig-cap: "Percentage of Bare Ground of Natural Bridges National Monument(NBNM) <br> Data Source: US Geological Survey (USGS)"  
#| warning: false 
#| echo: false
#| message: false

# import libraries
import plotly.express as px

# Create a Choropleth Map
fig3 = px.scatter_mapbox(data, 
                     lon='long', 
                     lat='lat', 
                     color='Bare',
                     size='Bare',
                     size_max=14,
                     zoom=11.3,
                     color_continuous_scale=px.colors.sequential.GnBu)

# Customize the Map
fig3.update_layout(mapbox_style="open-street-map")
fig3.update_layout(title='<b>Percentage of Bare Ground of NBNM', title_x=0.5, title_font=dict(size=23, family="Sen", color="#38A7BB"),
coloraxis_colorbar=dict(title="Bare Ground(%)", title_font=dict(size=12,color="#333333",family="Sen")))


#Show the Map
fig3.show()
```

## Tree Canopy
```{python}
#| label: fig-plot1
#| fig-cap: "Percentage of Tree Canopy Coverage of Natural Bridges National Monument(NBNM) <br> Data Source: US Geological Survey (USGS)"  
#| warning: false 
#| echo: false
#| message: false

# import libraries
import plotly.express as px

# Create a Choropleth Map
fig1 = px.scatter_mapbox(data, 
                     lon='long', 
                     lat='lat', 
                     color='treecanopy',
                     size='treecanopy',
                     size_max=14,
                     zoom=11,
                     color_continuous_scale=px.colors.sequential.GnBu)

# Customize the Map
fig1.update_layout(mapbox_style="open-street-map", width=950)
fig1.update_layout(title='<b>Percentage of Tree Canopy Coverage of NBNM', title_x=0.5, title_font=dict(size=23, family="Sen", color="#38A7BB"),
coloraxis_colorbar=dict(title="Tree canopy(%)", title_font=dict(size=12,color="#333333",family="Sen")))


#Show the Map
fig1.show()
```

## Plant Litter
```{python}
#| label: fig-plot5
#| fig-cap: "Percentage of Plant Litter Coverage of Natural Bridges National Monument(NBNM) <br> Data Source: US Geological Survey (USGS)"  
#| warning: false 
#| echo: false
#| message: false

# import libraries
import plotly.express as px

# Create a Choropleth Map
fig5 = px.scatter_mapbox(data, 
                     lon='long', 
                     lat='lat', 
                     color='Litter',
                     size='Litter',
                     size_max=14,
                     zoom=11,
                     color_continuous_scale=px.colors.sequential.GnBu)

# Customize the Map
fig5.update_layout(mapbox_style="open-street-map", width=950)
fig5.update_layout(title='<b>Percentage of Plant Litter Coverage of NBNM', title_x=0.5, title_font=dict(size=23, family="Sen", color="#38A7BB"),
coloraxis_colorbar=dict(title="Plant Litter(%)", title_font=dict(size=12,color="#333333",family="Sen")))


#Show the Map
fig5.show()
```

## Shrubs
```{python}
#| label: fig-plot6
#| fig-cap: "Percentage of Shrubs Coverage of Natural Bridges National Monument(NBNM) <br> Data Source: US Geological Survey (USGS)"  
#| warning: false 
#| echo: false
#| message: false

# import libraries
import plotly.express as px

# Create a Choropleth Map
fig6 = px.scatter_mapbox(data, 
                     lon='long', 
                     lat='lat', 
                     color='Shrub',
                     size='Shrub',
                     size_max=14,
                     zoom=11,
                     color_continuous_scale=px.colors.sequential.GnBu)

# Customize the Map
fig6.update_layout(mapbox_style="open-street-map", width=950)
fig6.update_layout(title='<b>Percentage of Shrubs Coverage of NBNM', title_x=0.5, title_font=dict(size=23, family="Sen", color="#38A7BB"),
coloraxis_colorbar=dict(title="Shrub(%)", title_font=dict(size=12,color="#333333",family="Sen")))


#Show the Map
fig6.show()
```

## Herbaceous Plants
```{python}
#| label: fig-plot4
#| fig-cap: "Percentage of Herbaceous Plants Coverage of Natural Bridges National Monument(NBNM) <br> Data Source: US Geological Survey (USGS)"  
#| warning: false 
#| echo: false
#| message: false

# import libraries
import plotly.express as px

# Create a Choropleth Map
fig4 = px.scatter_mapbox(data, 
                     lon='long', 
                     lat='lat', 
                     color='Herb',
                     size='Herb',
                     size_max=14,
                     zoom=11,
                     color_continuous_scale=px.colors.sequential.GnBu)

# Customize the Map
fig4.update_layout(mapbox_style="open-street-map", width=950)
fig4.update_layout(title='<b>Percentage of Herbaceous Plants Coverage of NBNM', title_x=0.5, title_font=dict(size=23, family="Sen", color="#38A7BB"),
coloraxis_colorbar=dict(title="Herbaceous Plants(%)", title_font=dict(size=12,color="#333333",family="Sen")))


#Show the Map
fig4.show()
```

## Annual Herbaceous
```{python}
#| label: fig-plot2
#| fig-cap: "Percentage of Annual Herbaceous Coverage of Natural Bridges National Monument(NBNM) <br> Data Source: US Geological Survey (USGS)"  
#| warning: false 
#| echo: false
#| message: false

# import libraries
import plotly.express as px

# Create a Choropleth Map
fig2 = px.scatter_mapbox(data, 
                     lon='long', 
                     lat='lat', 
                     color='Ann_Herb',
                     size='Ann_Herb',
                     size_max=14,
                     zoom=11,
                     color_continuous_scale=px.colors.sequential.GnBu)

# Customize the Map
fig2.update_layout(mapbox_style="open-street-map", width=950)
fig2.update_layout(title='<b>Percentage of Annual Herbaceous Coverage of NBNM', title_x=0.5, title_font=dict(size=23, family="Sen", color="#38A7BB"),
coloraxis_colorbar=dict(title="Annual Herbaceous(%)", title_font=dict(size=12,color="#333333",family="Sen")))


#Show the Map
fig2.show()
```

:::

# Temperatrue

::: {.callout-tip}
## Chart Navigation Tips
- **Division Filtering:** Choose one of seven expenditure divisions from the dropdown menu.
- **Commodity Filtering:** Click commodity names in the legend to filter for specific commodities within a division.
- **Time Filtering:** Drag across the visualization to filter for a specific time range.
- **Tooltip:** Hover over the visualization to observe the value for each data point.
- **Annotations:** Each category's average and maximum expenditure values.
:::

```{python}
#| label: fig-plot7
#| fig-cap: "Yearly Temperature Trends at Natural Bridges National Monument (NBNM) <br> Data Source: US Geological Survey (USGS)"  
#| warning: false 
#| echo: false
#| message: false

# import libraries
import plotly.graph_objects as go 
import plotly.io as pio


# select the temperature data
data1 = round(data.groupby('year')['T_Winter'].mean(),2).reset_index()
data1['Tmin_winter'] = round(data.groupby('year')['Tmin_Winter'].mean(),2).reset_index()['Tmin_Winter']
data1['T_summer'] = round(data.groupby('year')['T_Summer'].mean(),2).reset_index()['T_Summer']
data1['Tmax_summer'] = round(data.groupby('year')['Tmax_Summer'].mean(),2).reset_index()['Tmax_Summer']

# create the line plot
# Initialize figure
fig = go.Figure()

# Add Traces
fig.add_trace(
    go.Scatter(x=data1.year,
               y=data1.T_Winter,
               name="Winter Average Temperature",
               mode='lines+markers',
               line=dict(color="#33CFA5"),
               marker=dict(symbol='triangle-down')))
fig.add_trace(
    go.Scatter(x=list(data1.year),
               y=[data1.T_Winter.mean()] * len(data1.index),
               name="Yearly Average",
               visible=False,
               line=dict(color="#38A7BB", dash="dash")))

fig.add_trace(
    go.Scatter(x=data1.year,
               y=data1.Tmin_winter,
               name="Winter Minimum Temperature",
               mode='lines+markers',
               line=dict(color="darkgreen"),
               marker=dict(symbol='circle')))
fig.add_trace(
    go.Scatter(x=list(data1.year),
               y=[data1.Tmin_winter.mean()] * len(data1.index),
               name="Yearly Average",
               visible=False,
               line=dict(color="#38A7BB", dash="dash")))

fig.add_trace(
    go.Scatter(x=data1.year,
               y=data1.T_summer,
               name="Summer Average Temperature",
               mode='lines+markers',
               line=dict(color="#ff7f0e"),
               marker=dict(symbol='square')))
fig.add_trace(
    go.Scatter(x=list(data1.year),
               y=[data1.T_summer.mean()] * len(data1.index),
               name="Yearly Average",
               visible=False,
               line=dict(color="#38A7BB", dash="dash")))

fig.add_trace(
    go.Scatter(x=data1.year,
               y=data1.Tmax_summer,
               name="Summer Maximum Temperature",
               mode='lines+markers',
               line=dict(color="red"),
               marker=dict(symbol='diamond')))

fig.add_trace(
    go.Scatter(x=list(data1.year),
               y=[data1.Tmax_summer.mean()] * len(data1.index),
               name="Yearly Average",
               visible=False,
               line=dict(color="#38A7BB", dash="dash")))

# Add Annotations and Buttons
w_annotations = [dict(x="2000",
                         y=data1.T_Winter.mean(),
                         xref="x", yref="y",
                         text="Yearly Average:<br> %.2f" % data1.T_Winter.mean(),
                         ax=0, ay=-120)]
wmin_annotations = [dict(x="2000",
                         y=data1.Tmin_winter.mean(),
                         xref="x", yref="y",
                         text="Yearly Average:<br> %.2f" % data1.Tmin_winter.mean(),
                         ax=0, ay=-120)]
s_annotations = [dict(x="2000",
                         y=data1.T_summer.mean(),
                         xref="x", yref="y",
                         text="Yearly Average:<br> %.2f" % data1.T_summer.mean(),
                         ax=0, ay=-120)]
smax_annotations = [dict(x="2000",
                         y=data1.Tmax_summer.mean(),
                         xref="x", yref="y",
                         text="Yearly Average:<br> %.2f" % data1.Tmax_summer.mean(),
                         ax=0, ay=-120)]

fig.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="Choose",
                     method="update",
                     args=[{"visible": [True, False, True, False, True, False, True, False]},
                           {"title": "<b>Yearly Temperature Trends at Natural Bridges National Monument (NBNM)",
                            "annotations": []}]),
                dict(label="Winter Average Temperature",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False, False]},
                           {"title": "<b>Winter Average Temperature Trends at Natural Bridges National Monument (NBNM)",
                            "annotations": w_annotations}]),
                dict(label="Winter Minimum Temperature",
                     method="update",
                     args=[{"visible": [False, False, True, True, False, False,  False, False]},
                           {"title": "<b>Winter Minimum Temperature Trends at Natural Bridges National Monument (NBNM)",
                            "annotations": wmin_annotations}]),
                dict(label="Summer Average Temperature",
                     method="update",
                     args=[{"visible": [False, False, False, False, True, True,False, False]},
                           {"title": "<b>Summer Average Temperature Trends at Natural Bridges National Monument (NBNM)",
                            "annotations": s_annotations}]),
                dict(label="Summer Maxmum Temperature",
                     method="update",
                     args=[{"visible": [False, False,  False, False,  False, False, True, True]},
                           {"title": "<b>Summer Maxmum Temperature Trends at Natural Bridges National Monument (NBNM)",
                            "annotations": smax_annotations}]),
            ]),
        )
    ])
     
# Set title and layout
fig.update_layout(title_text="<b> Yearly Temperature Trends at Natural Bridges National Monument (NBNM)", title_x=0.5, title_font=dict(size=20, family="Sen", color="#38A7BB"),
    xaxis_title="<b>Year", 
    xaxis=dict(title_font=dict(size=15, family="Sen", color="#38A7BB")),
    yaxis_title="<b>degrees Celsius",
    yaxis=dict(title_font=dict(size=15, family="Sen", color="#38A7BB")),
    template="plotly_white",
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=-0.3,
        xanchor="center",
        x=0.5,
        title_font=dict(size=15, family="Sen", color="#38A7BB"),
        bgcolor="rgba(0,0,0,0)",
        bordercolor="rgba(0,0,0,0)"
    ))

fig.show()
```

# Precipitation

::: {.callout-tip}
## Chart Navigation Tips
- **Division Filtering:** Choose one of seven expenditure divisions from the dropdown menu.
- **Commodity Filtering:** Click commodity names in the legend to filter for specific commodities within a division.
- **Time Filtering:** Drag across the visualization to filter for a specific time range.
- **Tooltip:** Hover over the visualization to observe the value for each data point.
- **Annotations:** Each category's average and maximum expenditure values.
:::

```{python}
#| label: fig-plot8
#| fig-cap: "Precipitation(Summer & Winter) at Natural Bridges National Monument (NBNM) <br> Data Source: US Geological Survey (USGS)"  
#| warning: false 
#| echo: false
#| message: false

# import libraries
import plotly.graph_objects as go 
import plotly.io as pio

# select the precipitation data
data2 = round(data.groupby('year')['PPT_Winter'].mean(),2).reset_index()
data2['PPT_Summer'] = round(data.groupby('year')['PPT_Summer'].mean(),2).reset_index()['PPT_Summer']
data2['PPT_Total'] = [sum(row) for row in zip(data2['PPT_Winter'], data2['PPT_Summer'])]

# create the bar plot
# Initialize figure
fig8 = go.Figure()

# Add Traces
fig8.add_trace(
    go.Bar(x=data2.year,
               y=data2.PPT_Winter,
               name="Winter",
               text=data2.PPT_Winter,
               textposition='auto',
               marker_color="#33CFA5",
               marker_line_width=2))

fig8.add_trace(
    go.Bar(x=data2.year,
               y=data2.PPT_Summer,
               name="Summer",
               text=data2.PPT_Summer,
               textposition='auto',
               marker_color="#ff7f0e",
               marker_line_width=2))

fig8.add_trace(
    go.Scatter(x=list(data2.year),
               y=[round(data2.PPT_Total.mean(),2)] * len(data2.index),
               name="Yearly Average",
               hovertext=["Total: {:.2f}".format(val) for val in data2.PPT_Total],
               line=dict(color="#38A7BB", dash="dash")))

# Set title and layout
fig8.update_layout(title_text="<b> Precipitation(Summer & Winter) at Natural Bridges National Monument (NBNM)", title_x=0.5, title_font=dict(size=20, family="Sen", color="#38A7BB"),
    xaxis_title="<b>Year", 
    xaxis=dict(title_font=dict(size=15, family="Sen", color="#38A7BB")),
    yaxis_title="<b>Centimeters",
    yaxis=dict(title_font=dict(size=15, family="Sen", color="#38A7BB")),
    template="plotly_white",
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=-0.3,
        xanchor="center",
        x=0.5,
        title_font=dict(size=15, family="Sen", color="#38A7BB"),
        bgcolor="rgba(0,0,0,0)",
        bordercolor="rgba(0,0,0,0)"),
    barmode='stack')

# Add Annotations
annotations = [dict(x="2000",
                         y=data2.PPT_Total.mean(),
                         xref="x", yref="y",
                         text="Yearly Average:<br> %.2f" % data2.PPT_Total.mean(),
                         ax=0, ay=-100)]

fig8.update_layout(annotations=annotations)

fig8.show()

```



# evaporation during summer

::: {.callout-tip}
## Chart Navigation Tips
- **Division Filtering:** Choose one of seven expenditure divisions from the dropdown menu.
- **Commodity Filtering:** Click commodity names in the legend to filter for specific commodities within a division.
- **Time Filtering:** Drag across the visualization to filter for a specific time range.
- **Tooltip:** Hover over the visualization to observe the value for each data point.
- **Annotations:** Each category's average and maximum expenditure values.
:::

```{python}
#| label: fig-plot9
#| fig-cap: "Evaporation in Summer at Natural Bridges National Monument(NBNM) <br> Data Source: US Geological Survey (USGS)"  
#| warning: false 
#| echo: false
#| message: false

# select the evaporation data
data4 = round(data.groupby(['long', 'lat'])['Evap_Summer'].mean(), 2).reset_index()
data4.rename(columns={'Evap_Summer':'Evap_Summer_Yearly_Average'}, inplace=True)

# set location id
locat = data[['long','lat']].drop_duplicates().reset_index(drop=True)
locat['id'] = range(0,len(locat))
data5 = data.merge(locat, on=['long','lat'], how='left')
data5 = data5.merge(data4, on=['long','lat'], how='left')
data5.rename(columns={'year':'Year'}, inplace=True)
data5['Evap_Summer']=round(data5['Evap_Summer'],2)

# import libraries
import altair as alt

# create the chart
selector = alt.selection_point(fields=['id'])

base = alt.Chart(data5).properties(
    width=400,
    height=300
).add_params(selector)

points = base.mark_circle(
       size=13,
       color='#38A7BB',
).encode(
    longitude='long:Q',
    latitude='lat:Q',
    tooltip=['long', 'lat', 'Evap_Summer_Yearly_Average'],
    color=alt.condition(selector, 'id:O', alt.value('lightgray'), legend=None),
).properties(
    title='Yearly Average Summer Evaporation by Location'
).encode(
    x=alt.X('long:Q', title='Longitude', scale=alt.Scale(domain=[-110.05, -109.96])),
    y=alt.Y('lat:Q', title='Latitude', scale=alt.Scale(domain=[37.56, 37.64])),
)

timeseries = base.mark_line().encode(
    x='Year',
    y=alt.Y('Evap_Summer',title='Evaporation in Summer(Centimeters)').scale(domain=(1, 8)),
    color=alt.Color('id:O').legend(None),
    tooltip=['Year','Evap_Summer']
).transform_filter(
    selector
).properties(
    title='Summer Evaporation Over the Years', 
)

# combine the chart
chart = (points | timeseries).configure_title(
    color='#38A7BB', font='Sen', fontSize=19
).configure_axis(
    titleFontSize=15,
    titleFont='Sen',
    titleColor='#38A7BB',
)

chart
```


# FrostDays_Winter

::: {.callout-tip}
## Chart Navigation Tips
- **Division Filtering:** Choose one of seven expenditure divisions from the dropdown menu.
- **Commodity Filtering:** Click commodity names in the legend to filter for specific commodities within a division.
- **Time Filtering:** Drag across the visualization to filter for a specific time range.
- **Tooltip:** Hover over the visualization to observe the value for each data point.
- **Annotations:** Each category's average and maximum expenditure values.
:::

```{python}
#| label: fig-plot10
#| fig-cap: "Frost Days in Winter at Natural Bridges National Monument(NBNM) <br> Data Source: US Geological Survey (USGS)"  
#| warning: false 
#| echo: false
#| message: false

# select the FrostDays_Winter data
data6 = round(data.groupby(['long', 'lat'])['FrostDays_Winter'].mean(), 1).reset_index()
data6.rename(columns={'FrostDays_Winter':'FrostDays_Winter_Yearly_Average'}, inplace=True)

# set location id
locat = data[['long','lat']].drop_duplicates().reset_index(drop=True)
locat['id'] = range(0,len(locat))
data7 = data.merge(locat, on=['long','lat'], how='left')
data7 = data7.merge(data6, on=['long','lat'], how='left')
data7.rename(columns={'year':'Year'}, inplace=True)

# import libraries
import altair as alt

# create the chart
selector = alt.selection_point(fields=['id'])

base = alt.Chart(data7).properties(
    width=400,
    height=300
).add_params(selector)

points1 = base.mark_circle(
       size=13,
       color='#38A7BB',
).encode(
    longitude='long:Q',
    latitude='lat:Q',
    tooltip=['long', 'lat', 'FrostDays_Winter_Yearly_Average'],
    color=alt.condition(selector, 'id:O', alt.value('lightgray'), legend=None),
).properties(
    title='Yearly Average Frost Days in Winter by Location'
).encode(
    x=alt.X('long:Q', title='Longitude', scale=alt.Scale(domain=[-110.05, -109.96])),
    y=alt.Y('lat:Q', title='Latitude', scale=alt.Scale(domain=[37.56, 37.64])),
)

timeseries1 = base.mark_line().encode(
    x='Year',
    y=alt.Y('FrostDays_Winter',title='Count of Days below -1C in Winter').scale(domain=(55, 92)),
    color=alt.Color('id:O').legend(None),
    tooltip=['Year','FrostDays_Winter']
).transform_filter(
    selector
).properties(
    title='Frost Days in Winter Over the Years', 
)

# combine the chart
chart1 = (points1 | timeseries1).configure_title(
    color='#38A7BB', font='Sen', fontSize=19
).configure_axis(
    titleFontSize=15,
    titleFont='Sen',
    titleColor='#38A7BB',
)

chart1
```


# volumetric water content

::: {.callout-tip}
## Chart Navigation Tips
- **Division Filtering:** Choose one of seven expenditure divisions from the dropdown menu.
- **Commodity Filtering:** Click commodity names in the legend to filter for specific commodities within a division.
- **Time Filtering:** Drag across the visualization to filter for a specific time range.
- **Tooltip:** Hover over the visualization to observe the value for each data point.
- **Annotations:** Each category's average and maximum expenditure values.
:::

:::: {.columns}
::: {.column width="60%"}
```{python}
#| label: fig-plot11
#| fig-cap: "Volumetric Water Content at Natural Bridges National Monument (NBNM) <br> Data Source: US Geological Survey (USGS)"  
#| warning: false 
#| echo: false
#| message: false

# import libraries
import plotly.graph_objects as go 
import plotly.io as pio
import plotly.express as px

# select the VWC data
data3 = round(data.groupby('year')['VWC_Spring_whole'].mean(),2).reset_index()
data3['Summer'] = round(data.groupby('year')['VWC_Summer_whole'].mean(),2).reset_index()['VWC_Summer_whole']
data3['Fall'] = round(data.groupby('year')['VWC_Fall_whole'].mean(),2).reset_index()['VWC_Fall_whole']
data3['Winter'] = round(data.groupby('year')['VWC_Winter_whole'].mean(),2).reset_index()['VWC_Winter_whole']
data3.rename(columns={'VWC_Spring_whole':'Spring', 'year':'Year'}, inplace=True)
data3_long = data3.melt(id_vars='Year', var_name='Season', value_name='Value')

# create the radar plot
fig9 = px.line_polar(data3_long, r='Value', theta='Season', line_close=True, text = 'Value', color_discrete_sequence = ['#38A7BB'], animation_frame="Year")
fig9.update_traces(fill='toself')

# set title and layout
fig9.update_layout(title_text="<b> Seasonal VMC at NBNM", title_x=0.5, title_font=dict(size=20, family="Sen", color="#38A7BB"),
    template="plotly_white")

fig9.show()
```

:::

::: {.column width="40%"}
```{python}
#| warning: false 
#| echo: false
#| message: false

data3['VWC_Total'] = [sum(row) for row in zip(data3['Spring'],data3['Summer'],data3['Winter'],data3['Fall'])]

# create the line plot
# Add Traces
fig10 = go.Figure()
fig10.add_trace(
    go.Scatter(x=data3.Year,
               y=data3.VWC_Total,
               name="Total",
               mode='lines+markers',
               line=dict(color='#38A7BB'),
               marker=dict(symbol='triangle-down')))

fig10.update_layout(title_text="<b> Yearly VMC at NBNM", title_x=0.5, title_font=dict(size=20, family="Sen", color="#38A7BB"),
    xaxis_title="<b>Year", 
    xaxis=dict(title_font=dict(size=15, family="Sen", color="#38A7BB")),
    yaxis_title="<b>Median Volumetric Water content in m^3",
    yaxis=dict(title_font=dict(size=15, family="Sen", color="#38A7BB")),
    template="plotly_white")
fig10.show()
```

:::
::::