---
title: "Increasing Aridification and Drought Stress: The Most Significant Resource Issues Facing Natural Bridges National Monument"
date: "May, 2024"
format:
    html: 
      self-contained: true
      grid: 
        margin-width: 50px
        body-width: 1000px
        sidebar-width: 250px
      code-fold: true
      embed-resources: true
editor_options: 
  chunk_output_type: console
execute: 
  echo: fenced
#reference-location: margin
#citation-location: margin
---

```{python}
#| echo: false
#| warning: false
#| message: false

# Data Ingestion and Munging
# import libraries
import pandas as pd
import plotly.express as px

# load the data
his = pd.read_csv("../Data Set/NABR_historic.csv")

# select the historic data
his_a = his[['long', 'lat', 'year', 'TimePeriod', 'RCP', 'scenario', 'treecanopy',
       'Ann_Herb', 'Bare', 'Herb', 'Litter', 'Shrub',
       'DrySoilDays_Summer_whole', 'Evap_Summer',
       'ExtremeShortTermDryStress_Summer_whole', 'FrostDays_Winter',
       'NonDrySWA_Summer_whole', 'Tmin_Winter',
       'VWC_Winter_whole', 'VWC_Spring_whole', 'VWC_Summer_whole',
       'VWC_Fall_whole']]
his_a.drop_duplicates(inplace=True)
his_a.dropna(subset=['Evap_Summer'], inplace=True)

his_b = his[['long', 'lat', 'year', 'TimePeriod', 'RCP', 'scenario', 'treecanopy',
       'Ann_Herb', 'Bare', 'Herb', 'Litter', 'Shrub',
       'PPT_Winter', 'PPT_Summer', 
       'T_Winter', 'T_Summer',  'Tmax_Summer']]
his_b.drop_duplicates(inplace=True)
his_b.dropna(subset=['PPT_Winter'], inplace=True)

his = pd.merge(his_a, his_b, on=['long', 'lat', 'year', 'TimePeriod', 'RCP', 'scenario', 'treecanopy',
       'Ann_Herb', 'Bare', 'Herb', 'Litter', 'Shrub'], how='inner')


# load the data
nt = pd.read_csv("../Data Set/nearterm_data_2020-2024.csv")
nt = nt[nt['scenario']=='sc22']

# select the nearterm data
nt_a = nt[['long', 'lat', 'year', 'TimePeriod', 'RCP', 'scenario', 'treecanopy',
       'Ann_Herb', 'Bare', 'Herb', 'Litter', 'Shrub',
       'DrySoilDays_Summer_whole', 'Evap_Summer',
       'ExtremeShortTermDryStress_Summer_whole', 'FrostDays_Winter',
       'NonDrySWA_Summer_whole', 'Tmin_Winter',
       'VWC_Winter_whole', 'VWC_Spring_whole', 'VWC_Summer_whole',
       'VWC_Fall_whole']]
nt_a.drop_duplicates(inplace=True)
nt_a.dropna(subset=['Evap_Summer'], inplace=True)

nt_b = nt[['long', 'lat', 'year', 'TimePeriod', 'RCP', 'scenario', 'treecanopy',
       'Ann_Herb', 'Bare', 'Herb', 'Litter', 'Shrub',
       'PPT_Winter', 'PPT_Summer', 
       'T_Winter', 'T_Summer',  'Tmax_Summer']]
nt_b.drop_duplicates(inplace=True)
nt_b.dropna(subset=['PPT_Winter'], inplace=True)

nt = pd.merge(nt_a, nt_b, on=['long', 'lat', 'year', 'TimePeriod', 'RCP', 'scenario', 'treecanopy',
       'Ann_Herb', 'Bare', 'Herb', 'Litter', 'Shrub'], how='inner')

# combine data
data = pd.concat([his, nt], axis=0)
data.sort_values(by=['long','lat','year'], inplace=True)
data.reset_index(drop=True, inplace=True)

```

::: {.callout-note appearance="simple"}
If the charts are not visible, please try refreshing the website.
:::

`Climate change` is no longer a future threat. We are presently witnessing its effects in the `Four Corners Region` through modifications to the water and vegetation resources. Because anticipated increases in precipitation will probably be countered by **warming temperatures** that will increase evaporation rates, the Four Corners Region is expected to become **drier and warmer** in the future. The distribution of plants and animals in parks will shift due to climate change, which will alter ecosystem functions. Climate change has an impact on all of the vital indications associated with natural resources in the Four Corners Region.

`Natural Bridges National Monument` is a U.S. National Monument located about 50 miles (80 km) northwest of the Four Corners boundary of southeast Utah, in the western United States.[^my_note] According to data from the US Geological Survey (USGS), we can observe specific **climate change impacts** at the Natural Bridges National Monument.

![](images/nbnm.png)

# Bare Ground Dominates the Landscape at Natural Bridges National Monument

::: {.callout-tip}
## Chart Navigation Tips
- **Color-Coded Index:** The color spectrum on the map represents various percentages of vegetation coverage, with **darker** colors indicating higher percentages. 
- **Size-Coded Index:** The size of the points on the map corresponds to different percentages of vegetation coverage, with **larger** points denoting higher percentages.
- **Tooltip:** Hover over any point on the map to view the longitude, latitude, and the precise percentage of vegetation coverage for that location.
:::

::: {.panel-tabset}

## Bare Ground
```{python}
#| label: fig-plot3
#| fig-cap: "Percentage of Bare Ground of Natural Bridges National Monument(NBNM) <br> Data Source: US Geological Survey (USGS)"  
#| warning: false 
#| echo: false
#| message: false

# import libraries
import plotly.express as px

# Create a Choropleth Map
fig3 = px.scatter_mapbox(data, 
                     lon='long', 
                     lat='lat', 
                     color='Bare',
                     size='Bare',
                     size_max=14,
                     zoom=11.3,
                     color_continuous_scale=px.colors.sequential.GnBu)

# Customize the Map
fig3.update_layout(mapbox_style="open-street-map")
fig3.update_layout(title='<b>Percentage of Bare Ground of NBNM', title_x=0.5, title_font=dict(size=23, family="Sen", color="#38A7BB"),
coloraxis_colorbar=dict(title="Bare Ground(%)", title_font=dict(size=12,color="#333333",family="Sen")))


#Show the Map
fig3.show()
```

## Tree Canopy
```{python}
#| label: fig-plot1
#| fig-cap: "Percentage of Tree Canopy Coverage of Natural Bridges National Monument(NBNM) <br> Data Source: US Geological Survey (USGS)"  
#| warning: false 
#| echo: false
#| message: false

# import libraries
import plotly.express as px

# Create a Choropleth Map
fig1 = px.scatter_mapbox(data, 
                     lon='long', 
                     lat='lat', 
                     color='treecanopy',
                     size='treecanopy',
                     size_max=14,
                     zoom=11,
                     color_continuous_scale=px.colors.sequential.GnBu)

# Customize the Map
fig1.update_layout(mapbox_style="open-street-map", width=950)
fig1.update_layout(title='<b>Percentage of Tree Canopy Coverage of NBNM', title_x=0.5, title_font=dict(size=23, family="Sen", color="#38A7BB"),
coloraxis_colorbar=dict(title="Tree canopy(%)", title_font=dict(size=12,color="#333333",family="Sen")))


#Show the Map
fig1.show()
```

## Plant Litter
```{python}
#| label: fig-plot5
#| fig-cap: "Percentage of Plant Litter Coverage of Natural Bridges National Monument(NBNM) <br> Data Source: US Geological Survey (USGS)"  
#| warning: false 
#| echo: false
#| message: false

# import libraries
import plotly.express as px

# Create a Choropleth Map
fig5 = px.scatter_mapbox(data, 
                     lon='long', 
                     lat='lat', 
                     color='Litter',
                     size='Litter',
                     size_max=14,
                     zoom=11,
                     color_continuous_scale=px.colors.sequential.GnBu)

# Customize the Map
fig5.update_layout(mapbox_style="open-street-map", width=950)
fig5.update_layout(title='<b>Percentage of Plant Litter Coverage of NBNM', title_x=0.5, title_font=dict(size=23, family="Sen", color="#38A7BB"),
coloraxis_colorbar=dict(title="Plant Litter(%)", title_font=dict(size=12,color="#333333",family="Sen")))


#Show the Map
fig5.show()
```

## Shrubs
```{python}
#| label: fig-plot6
#| fig-cap: "Percentage of Shrubs Coverage of Natural Bridges National Monument(NBNM) <br> Data Source: US Geological Survey (USGS)"  
#| warning: false 
#| echo: false
#| message: false

# import libraries
import plotly.express as px

# Create a Choropleth Map
fig6 = px.scatter_mapbox(data, 
                     lon='long', 
                     lat='lat', 
                     color='Shrub',
                     size='Shrub',
                     size_max=14,
                     zoom=11,
                     color_continuous_scale=px.colors.sequential.GnBu)

# Customize the Map
fig6.update_layout(mapbox_style="open-street-map", width=950)
fig6.update_layout(title='<b>Percentage of Shrubs Coverage of NBNM', title_x=0.5, title_font=dict(size=23, family="Sen", color="#38A7BB"),
coloraxis_colorbar=dict(title="Shrub(%)", title_font=dict(size=12,color="#333333",family="Sen")))


#Show the Map
fig6.show()
```

## Herbaceous Plants
```{python}
#| label: fig-plot4
#| fig-cap: "Percentage of Herbaceous Plants Coverage of Natural Bridges National Monument(NBNM) <br> Data Source: US Geological Survey (USGS)"  
#| warning: false 
#| echo: false
#| message: false

# import libraries
import plotly.express as px

# Create a Choropleth Map
fig4 = px.scatter_mapbox(data, 
                     lon='long', 
                     lat='lat', 
                     color='Herb',
                     size='Herb',
                     size_max=14,
                     zoom=11,
                     color_continuous_scale=px.colors.sequential.GnBu)

# Customize the Map
fig4.update_layout(mapbox_style="open-street-map", width=950)
fig4.update_layout(title='<b>Percentage of Herbaceous Plants Coverage of NBNM', title_x=0.5, title_font=dict(size=23, family="Sen", color="#38A7BB"),
coloraxis_colorbar=dict(title="Herbaceous Plants(%)", title_font=dict(size=12,color="#333333",family="Sen")))


#Show the Map
fig4.show()
```

## Annual Herbaceous
```{python}
#| label: fig-plot2
#| fig-cap: "Percentage of Annual Herbaceous Coverage of Natural Bridges National Monument(NBNM) <br> Data Source: US Geological Survey (USGS)"  
#| warning: false 
#| echo: false
#| message: false

# import libraries
import plotly.express as px

# Create a Choropleth Map
fig2 = px.scatter_mapbox(data, 
                     lon='long', 
                     lat='lat', 
                     color='Ann_Herb',
                     size='Ann_Herb',
                     size_max=14,
                     zoom=11,
                     color_continuous_scale=px.colors.sequential.GnBu)

# Customize the Map
fig2.update_layout(mapbox_style="open-street-map", width=950)
fig2.update_layout(title='<b>Percentage of Annual Herbaceous Coverage of NBNM', title_x=0.5, title_font=dict(size=23, family="Sen", color="#38A7BB"),
coloraxis_colorbar=dict(title="Annual Herbaceous(%)", title_font=dict(size=12,color="#333333",family="Sen")))


#Show the Map
fig2.show()
```

:::

Nearly **two-thirds** of the locations in Natural Bridges National Monument have **over 50% bare ground coverage**, with some areas reaching as high as **90%**. The most severe problem is in the edge area on the upper left side of the park. Other types of vegetation cover include tree canopy, plant litter, shrubs, herbaceous plants, and annual herbaceous plants. Tree canopy and plant litter coverage are primarily concentrated in the top right of the park, with coverage up to around 25%. The distribution of shrubs and herbaceous plants is relatively even, mainly around the park’s edge areas, with coverage of about 15%.

The vegetation coverage at Natural Bridges National Monument indicates that **climate change significantly impacts vegetation resilience**. This issue demands serious attention and immediate action to protect the ecological environment. It is crucial to develop vegetation protection plans and programs that address the challenges posed by climate change.


# Significant Drought Stress at Natural Bridges National Monument

:::: {.columns}
::: {.column width="50%"}
![](images/water_deficit.webp)
:::
::: {.column width="5%"}
\
:::
::: {.column width="45%"}
\

The primary cause of the extensive bare ground at Natural Bridges National Monument is drought. `Water deficit` is a key indicator of `drought stress`. Traditionally, drought was considered to be a period of below-average precipitation. However, with rising temperatures, evaporation rates also increase. When **above-average temperatures** coincide with **below-average precipitation**, it leads to extreme water stress.[^my_note1]
:::
::::

## Above-Average Temperatures

::: {.callout-tip}
## Chart Navigation Tips
- **Division Filtering:** Select one of four temperature types at NBNM from the dropdown menu.
- **Temperature Type Filtering:** Click on temperature names in the legend to filter specific temperature types within a division.
- **Time Filtering:** Drag across the visualization to filter for a specific time range.
- **Tooltip:** Hover over the visualization to observe the value for each data point.
- **Annotations:** The dashed line and text represent the average value over the years.
:::

```{python}
#| label: fig-plot7
#| fig-cap: "Yearly Temperature Trends at Natural Bridges National Monument (NBNM) <br> Data Source: US Geological Survey (USGS)"  
#| warning: false 
#| echo: false
#| message: false

# import libraries
import plotly.graph_objects as go 
import plotly.io as pio


# select the temperature data
data1 = round(data.groupby('year')['T_Winter'].mean(),2).reset_index()
data1['Tmin_winter'] = round(data.groupby('year')['Tmin_Winter'].mean(),2).reset_index()['Tmin_Winter']
data1['T_summer'] = round(data.groupby('year')['T_Summer'].mean(),2).reset_index()['T_Summer']
data1['Tmax_summer'] = round(data.groupby('year')['Tmax_Summer'].mean(),2).reset_index()['Tmax_Summer']

# create the line plot
# Initialize figure
fig = go.Figure()

# Add Traces
fig.add_trace(
    go.Scatter(x=data1.year,
               y=data1.T_Winter,
               name="Winter Average Temperature",
               mode='lines+markers',
               line=dict(color="#33CFA5"),
               marker=dict(symbol='triangle-down')))
fig.add_trace(
    go.Scatter(x=list(data1.year),
               y=[data1.T_Winter.mean()] * len(data1.index),
               name="Average Over the Years",
               visible=False,
               line=dict(color="#38A7BB", dash="dash")))

fig.add_trace(
    go.Scatter(x=data1.year,
               y=data1.Tmin_winter,
               name="Winter Minimum Temperature",
               mode='lines+markers',
               line=dict(color="darkgreen"),
               marker=dict(symbol='circle')))
fig.add_trace(
    go.Scatter(x=list(data1.year),
               y=[data1.Tmin_winter.mean()] * len(data1.index),
               name="Average Over the Years",
               visible=False,
               line=dict(color="#38A7BB", dash="dash")))

fig.add_trace(
    go.Scatter(x=data1.year,
               y=data1.T_summer,
               name="Summer Average Temperature",
               mode='lines+markers',
               line=dict(color="#ff7f0e"),
               marker=dict(symbol='square')))
fig.add_trace(
    go.Scatter(x=list(data1.year),
               y=[data1.T_summer.mean()] * len(data1.index),
               name="Average Over the Years",
               visible=False,
               line=dict(color="#38A7BB", dash="dash")))

fig.add_trace(
    go.Scatter(x=data1.year,
               y=data1.Tmax_summer,
               name="Summer Maximum Temperature",
               mode='lines+markers',
               line=dict(color="red"),
               marker=dict(symbol='diamond')))

fig.add_trace(
    go.Scatter(x=list(data1.year),
               y=[data1.Tmax_summer.mean()] * len(data1.index),
               name="Average Over the Years",
               visible=False,
               line=dict(color="#38A7BB", dash="dash")))

# Add Annotations and Buttons
w_annotations = [dict(x="2000",
                         y=data1.T_Winter.mean(),
                         xref="x", yref="y",
                         text="Average:<br> %.2f" % data1.T_Winter.mean(),
                         ax=0, ay=-120)]
wmin_annotations = [dict(x="2000",
                         y=data1.Tmin_winter.mean(),
                         xref="x", yref="y",
                         text="Average:<br> %.2f" % data1.Tmin_winter.mean(),
                         ax=0, ay=-120)]
s_annotations = [dict(x="2000",
                         y=data1.T_summer.mean(),
                         xref="x", yref="y",
                         text="Average:<br> %.2f" % data1.T_summer.mean(),
                         ax=0, ay=-120)]
smax_annotations = [dict(x="2000",
                         y=data1.Tmax_summer.mean(),
                         xref="x", yref="y",
                         text="Average:<br> %.2f" % data1.Tmax_summer.mean(),
                         ax=0, ay=-120)]

fig.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="Choose",
                     method="update",
                     args=[{"visible": [True, False, True, False, True, False, True, False]},
                           {"title": "<b>Yearly Temperature Trends at Natural Bridges National Monument (NBNM)",
                            "annotations": []}]),
                dict(label="Winter Average Temperature",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False, False]},
                           {"title": "<b>Winter Average Temperature Trends at Natural Bridges National Monument (NBNM)",
                            "annotations": w_annotations}]),
                dict(label="Winter Minimum Temperature",
                     method="update",
                     args=[{"visible": [False, False, True, True, False, False,  False, False]},
                           {"title": "<b>Winter Minimum Temperature Trends at Natural Bridges National Monument (NBNM)",
                            "annotations": wmin_annotations}]),
                dict(label="Summer Average Temperature",
                     method="update",
                     args=[{"visible": [False, False, False, False, True, True,False, False]},
                           {"title": "<b>Summer Average Temperature Trends at Natural Bridges National Monument (NBNM)",
                            "annotations": s_annotations}]),
                dict(label="Summer Maximum Temperature",
                     method="update",
                     args=[{"visible": [False, False,  False, False,  False, False, True, True]},
                           {"title": "<b>Summer Maximum Temperature Trends at Natural Bridges National Monument (NBNM)",
                            "annotations": smax_annotations}]),
            ]),
        )
    ])
     
# Set title and layout
fig.update_layout(title_text="<b> Yearly Temperature Trends at Natural Bridges National Monument (NBNM)", title_x=0.5, title_font=dict(size=20, family="Sen", color="#38A7BB"),
    xaxis_title="<b>Year", 
    xaxis=dict(title_font=dict(size=15, family="Sen", color="#38A7BB")),
    yaxis_title="<b>degrees Celsius",
    yaxis=dict(title_font=dict(size=15, family="Sen", color="#38A7BB")),
    template="plotly_white",
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=-0.3,
        xanchor="center",
        x=0.5,
        title_font=dict(size=15, family="Sen", color="#38A7BB"),
        bgcolor="rgba(0,0,0,0)",
        bordercolor="rgba(0,0,0,0)"
    ))

fig.show()
```

At Natural Bridges National Monument, the average winter temperature has **consistently increased** since 2016, rising above 0 degrees Celsius and exceeding the 43-year average. The minimum winter temperature also saw a significant increase starting in 2010, rising from -25 degrees Celsius to a peak of -8.17 degrees Celsius in 2022.

A similar trend is observed in the summer. The average summer temperature has steadily increased since 2014, reaching a record high of 24.53 degrees Celsius in 2022, the highest in 43 years. Additionally, the maximum summer temperature has not dropped below 35 degrees Celsius since 2009. From 2021 to 2024, nearly all temperature types have been **above the 43-year average**.

## Decreasing Frost Days in Winter

::: {.callout-tip}
## Chart Navigation Tips
- **Location Filtering:** Click on a point in the left plot to filter for a specific location in NBNM and observe the frost days in winter at that location over the years in the right plot.
- **Tooltip:** Hover over the visualization to observe the value for each data point.
:::

```{python}
#| label: fig-plot10
#| fig-cap: "Frost Days in Winter at Natural Bridges National Monument(NBNM) <br> Data Source: US Geological Survey (USGS)"  
#| warning: false 
#| echo: false
#| message: false

# select the FrostDays_Winter data
data6 = round(data.groupby(['long', 'lat'])['FrostDays_Winter'].mean(), 1).reset_index()
data6.rename(columns={'FrostDays_Winter':'Average_FrostDays_Winter_Yearly'}, inplace=True)

# set location id
locat = data[['long','lat']].drop_duplicates().reset_index(drop=True)
locat['id'] = range(0,len(locat))
data7 = data.merge(locat, on=['long','lat'], how='left')
data7 = data7.merge(data6, on=['long','lat'], how='left')
data7.rename(columns={'year':'Year'}, inplace=True)

# import libraries
import altair as alt

# create the chart
selector = alt.selection_point(fields=['id'])

base = alt.Chart(data7).properties(
    width=400,
    height=300
).add_params(selector)

points1 = base.mark_circle(
       size=13,
       color='#38A7BB',
).encode(
    longitude='long:Q',
    latitude='lat:Q',
    tooltip=['long', 'lat', 'Average_FrostDays_Winter_Yearly'],
    color=alt.condition(selector, 'id:O', alt.value('lightgray'), legend=None),
).properties(
    title='Average Frost Days in Winter by Location Over the Years'
).encode(
    x=alt.X('long:Q', title='Longitude', scale=alt.Scale(domain=[-110.05, -109.96])),
    y=alt.Y('lat:Q', title='Latitude', scale=alt.Scale(domain=[37.56, 37.64])),
)

timeseries1 = base.mark_line().encode(
    x=alt.X('Year:Q', title='Year', axis=alt.Axis(format='d')),
    y=alt.Y('FrostDays_Winter',title='Count of Days below -1C in Winter').scale(domain=(55, 92)),
    color=alt.Color('id:O').legend(None),
    tooltip=['Year:Q','FrostDays_Winter']
).transform_filter(
    selector
).properties(
    title='Frost Days in Winter Over the Years', 
)

# combine the chart
chart1 = (points1 | timeseries1).configure_title(
    color='#38A7BB', font='Sen', fontSize=19
).configure_axis(
    titleFontSize=15,
    titleFont='Sen',
    titleColor='#38A7BB',
)

chart1
```

At Natural Bridges National Monument, the number of frost days in winter experienced a **dramatic drop** from 2012 to 2013, decreasing from a peak of 91 days to a low of 56 days. This trend has continued to decline over time, reflecting the overall **increase in winter temperatures** at the monument.


## Below-Average Precipitation

::: {.callout-tip}
## Chart Navigation Tips
- **Precipitation Season Filtering:** Click the legend to filter for specific season's precipitation within a division.
- **Time Filtering:** Drag across the visualization to filter for a specific time range.
- **Tooltip:** Hover over the dashed line to observe the total summer and winter precipitation for each year. Hover over the bars to see the specific value for each one. 
- **Annotations:** The dashed line and text represent the average value over the years. The specific value of each bar.
:::

```{python}
#| label: fig-plot8
#| fig-cap: "Precipitation(Summer & Winter) at Natural Bridges National Monument (NBNM) <br> Data Source: US Geological Survey (USGS)"  
#| warning: false 
#| echo: false
#| message: false

# import libraries
import plotly.graph_objects as go 
import plotly.io as pio

# select the precipitation data
data2 = round(data.groupby('year')['PPT_Winter'].mean(),2).reset_index()
data2['PPT_Summer'] = round(data.groupby('year')['PPT_Summer'].mean(),2).reset_index()['PPT_Summer']
data2['PPT_Total'] = [sum(row) for row in zip(data2['PPT_Winter'], data2['PPT_Summer'])]

# create the bar plot
# Initialize figure
fig8 = go.Figure()

# Add Traces
fig8.add_trace(
    go.Bar(x=data2.year,
               y=data2.PPT_Winter,
               name="Winter",
               text=data2.PPT_Winter,
               textposition='auto',
               marker_color="#33CFA5",
               marker_line_width=2))

fig8.add_trace(
    go.Bar(x=data2.year,
               y=data2.PPT_Summer,
               name="Summer",
               text=data2.PPT_Summer,
               textposition='auto',
               marker_color="#ff7f0e",
               marker_line_width=2))

fig8.add_trace(
    go.Scatter(x=list(data2.year),
               y=[round(data2.PPT_Total.mean(),2)] * len(data2.index),
               name="Average(Summer & Winter) Over the Years",
               hovertext=["Total: {:.2f}".format(val) for val in data2.PPT_Total],
               line=dict(color="#38A7BB", dash="dash")))

# Set title and layout
fig8.update_layout(title_text="<b> Precipitation(Summer & Winter) at Natural Bridges National Monument (NBNM)", title_x=0.5, title_font=dict(size=20, family="Sen", color="#38A7BB"),
    xaxis_title="<b>Year", 
    xaxis=dict(title_font=dict(size=15, family="Sen", color="#38A7BB")),
    yaxis_title="<b>Centimeters",
    yaxis=dict(title_font=dict(size=15, family="Sen", color="#38A7BB")),
    template="plotly_white",
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=-0.3,
        xanchor="center",
        x=0.5,
        title_font=dict(size=15, family="Sen", color="#38A7BB"),
        bgcolor="rgba(0,0,0,0)",
        bordercolor="rgba(0,0,0,0)"),
    barmode='stack')

# Add Annotations
annotations = [dict(x="2000",
                         y=data2.PPT_Total.mean(),
                         xref="x", yref="y",
                         text="Yearly Average:<br> %.2f" % data2.PPT_Total.mean(),
                         ax=0, ay=-100)]

fig8.update_layout(annotations=annotations)

fig8.show()

```

At Natural Bridges National Monument, the precipitation trend is **decreasing**. Since 2018, total precipitation in both summer and winter has consistently been **below the 43-year average**, failing to reach even 10 centimeters in 2021 and 2022. *The combination of higher temperatures and lower precipitation is causing significant water stress for the Monument*.

# Water Balance at Natural Bridges National Monument

:::: {.columns}
::: {.column width="50%"}
![](images/water_balance.jpeg)
:::
::: {.column width="5%"}
\
:::
::: {.column width="45%"}
Plants absorb water from the soil through their roots; they do not "drink" rain. Therefore, it's crucial to ascertain how much of the water falling from the sky is genuinely accessible to plants at any one time, rather than merely documenting the total amount. Monitoring the movement of precipitation in its many forms—liquid, solid, and gas—has helped us better understand how vegetation responds to weather and climate patterns. As a result, we are now far better equipped to comprehend the potential effects of climate change on park vegetation and animals.[^my_note2]
:::
::::


## Summer Evaporation

::: {.callout-tip}
## Chart Navigation Tips
- **Location Filtering:** Click on a point in the left plot to filter for a specific location in NBNM and observe the summer evaporation at that location over the years in the right plot.
- **Tooltip:** Hover over the visualization to observe the value for each data point.
:::

```{python}
#| label: fig-plot9
#| fig-cap: "Evaporation in Summer at Natural Bridges National Monument(NBNM) <br> Data Source: US Geological Survey (USGS)"  
#| warning: false 
#| echo: false
#| message: false

# select the evaporation data
data4 = round(data.groupby(['long', 'lat'])['Evap_Summer'].mean(), 2).reset_index()
data4.rename(columns={'Evap_Summer':'Average_Evap_Summer_Yearly'}, inplace=True)

# set location id
locat = data[['long','lat']].drop_duplicates().reset_index(drop=True)
locat['id'] = range(0,len(locat))
data5 = data.merge(locat, on=['long','lat'], how='left')
data5 = data5.merge(data4, on=['long','lat'], how='left')
data5.rename(columns={'year':'Year'}, inplace=True)
data5['Evap_Summer']=round(data5['Evap_Summer'],2)

# import libraries
import altair as alt

# create the chart
selector = alt.selection_point(fields=['id'])

base = alt.Chart(data5).properties(
    width=400,
    height=300
).add_params(selector)

points = base.mark_circle(
       size=13,
       color='#38A7BB',
).encode(
    longitude='long:Q',
    latitude='lat:Q',
    tooltip=['long', 'lat', 'Average_Evap_Summer_Yearly'],
    color=alt.condition(selector, 'id:O', alt.value('lightgray'), legend=None),
).properties(
    title='Average Summer Evaporation by Location Over the Years'
).encode(
    x=alt.X('long:Q', title='Longitude', scale=alt.Scale(domain=[-110.05, -109.96])),
    y=alt.Y('lat:Q', title='Latitude', scale=alt.Scale(domain=[37.56, 37.64])),
)

timeseries = base.mark_line().encode(
    x=alt.X('Year:Q', title='Year', axis=alt.Axis(format='d')),
    y=alt.Y('Evap_Summer',title='Evaporation in Summer(Centimeters)').scale(domain=(1, 8)),
    color=alt.Color('id:O').legend(None),
    tooltip=['Year','Evap_Summer']
).transform_filter(
    selector
).properties(
    title='Summer Evaporation Over the Years', 
)

# combine the chart
chart = (points | timeseries).configure_title(
    color='#38A7BB', font='Sen', fontSize=19
).configure_axis(
    titleFontSize=15,
    titleFont='Sen',
    titleColor='#38A7BB',
)

chart
```

While summer evaporation levels at Natural Bridges National Monument may appear average overall, there has been an increasing trend since 2018, with a dramatic rise observed from 2023 to 2024. This trend correlates with the **increase in summer temperatures**. This indicates that, despite consistent precipitation levels, the amount of available water is decreasing. Consequently, the water available for plants and animals is also being reduced.


## Volumetric Water Content

::: {.callout-tip}
## Chart Navigation Tips
- **Time Filtering:** Select the time frame on the right plot to filter for a specific year. Drag across the visualization on the left plot to filter for a specific time range.
- **Tooltip:** Hover over the visualization to observe the value for each data point.
- **Annotations:** Display the specific values for each category on the right plot.
:::

:::: {.columns}
::: {.column width="60%"}
```{python}
#| label: fig-plot11
#| fig-cap: "Volumetric Water Content at Natural Bridges National Monument(NBNM) <br> Data Source: US Geological Survey (USGS)"  
#| warning: false 
#| echo: false
#| message: false

# select the VWC data
data3 = round(data.groupby('year')['VWC_Spring_whole'].mean(),2).reset_index()
data3['Summer'] = round(data.groupby('year')['VWC_Summer_whole'].mean(),2).reset_index()['VWC_Summer_whole']
data3['Fall'] = round(data.groupby('year')['VWC_Fall_whole'].mean(),2).reset_index()['VWC_Fall_whole']
data3['Winter'] = round(data.groupby('year')['VWC_Winter_whole'].mean(),2).reset_index()['VWC_Winter_whole']
data3.rename(columns={'VWC_Spring_whole':'Spring', 'year':'Year'}, inplace=True)
data3_long = data3.melt(id_vars='Year', var_name='Season', value_name='Value')

# import libraries
import plotly.graph_objects as go 
import plotly.io as pio
import plotly.express as px

data3['VWC_Total'] = [sum(row) for row in zip(data3['Spring'],data3['Summer'],data3['Winter'],data3['Fall'])]

# create the line plot
# Add Traces
fig10 = go.Figure()
fig10.add_trace(
    go.Scatter(x=data3.Year,
               y=data3.VWC_Total,
               name="Total",
               mode='lines+markers',
               line=dict(color='#38A7BB'),
               marker=dict(symbol='triangle-down')))

fig10.update_layout(title_text="<b> Yearly VMC at NBNM", title_x=0.5, title_font=dict(size=20, family="Sen", color="#38A7BB"),
    xaxis_title="<b>Year", 
    xaxis=dict(title_font=dict(size=15, family="Sen", color="#38A7BB")),
    yaxis_title="<b>Median Volumetric Water content in m^3",
    yaxis=dict(title_font=dict(size=15, family="Sen", color="#38A7BB")),
    template="plotly_white")
fig10.show()
```

:::

::: {.column width="40%"}
```{python}
#| warning: false 
#| echo: false
#| message: false

# create the radar plot
fig9 = px.line_polar(data3_long, r='Value', theta='Season', line_close=True, text = 'Value', color_discrete_sequence = ['#38A7BB'], animation_frame="Year")
fig9.update_traces(fill='toself')

# set title and layout
fig9.update_layout(title_text="<b> Seasonal VMC at NBNM", title_x=0.5, title_font=dict(size=20, family="Sen", color="#38A7BB"),
    template="plotly_white")

fig9.show()
```

:::
::::

At Natural Bridges National Monument, the overall trend of yearly volumetric water content is **decreasing**. Typically, the volumetric water content is higher in winter and lower in summer. Although there was a rebound in 2024, the volumetric water content nearly reached its lowest point in over 43 years in 2022 and 2023. The amount of water available to plants is greatly threatened, highlighting the impact of climate change on the region. It is crucial to address this issue by developing plant protection plans and implementing appropriate measures.

# Conclusion

The Natural Bridges National Monument is facing significant challenges due to climate change-induced aridification and drought stress. Increasing temperatures, decreasing precipitation, and declining water content are urgent issues that need to be addressed to protect the ecological integrity of the Monument. They threaten the resilience of its vegetation and wildlife. If action is not taken, these tendencies will only get worse and make it more difficult to preserve this precious natural resource.

Immediate action is necessary to safeguard the ecological integrity of Natural Bridges National Monument. This entails creating thorough plans for vegetation protection in order to handle the unique problems that climate change presents. These plans should prioritize the conservation and restoration of native vegetation, as well as measures to mitigate soil erosion and promote ecosystem resilience.

Water conservation measures must be implemented within the monument due to the increasing water stress induced by decreasing precipitation and rising temperatures. This entails putting in place irrigation systems that consume less water, encouraging plant species that can withstand drought, and creating water management plans to maximize resource utilization.

Raising public knowledge of how climate change is affecting Natural Bridges National Monument is crucial. Educational programs, interpretive materials, and outreach campaigns can help engage visitors and local communities in efforts to protect this unique ecosystem.

Recognizing the importance of these challenges and working together to implement sustainable solutions will ensure the long-term resilience and vitality of this treasured natural landscape.


[^my_note]: Wikipedia contributors, "Natural Bridges National Monument," Wikipedia, The Free Encyclopedia, https://en.wikipedia.org/w/index.php?title=Natural_Bridges_National_Monument&oldid=1219301057 (accessed May 20, 2024).
[^my_note1]: National Park Service. "Localized Drought Impacts on Northern Colorado Plateau Landbirds." U.S. Department of the Interior. Last modified May 9, 2024. https://www.nps.gov/articles/000/ncpn_birds-and-drought.htm.
[^my_note2]: National Park Service. "Climate Change." Northern Colorado Plateau Inventory & Monitoring Network. Last updated April 13, 2023. Accessed May 20, 2024. https://www.nps.gov/im/ncpn/climate.htm.